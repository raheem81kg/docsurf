/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'
import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthRouteImport } from './routes/auth'
import { Route as WelcomeRouteImport } from './routes/_welcome'
import { Route as PRouteImport } from './routes/_p'
import { Route as MainRouteImport } from './routes/_main'
import { Route as WelcomeIndexRouteImport } from './routes/_welcome/index'
import { Route as SettingsUsageRouteImport } from './routes/settings/usage'
import { Route as SettingsProvidersRouteImport } from './routes/settings/providers'
import { Route as SettingsProfileRouteImport } from './routes/settings/profile'
import { Route as SettingsModelsRouteImport } from './routes/settings/models'
import { Route as SettingsInlineSuggestionsRouteImport } from './routes/settings/inline-suggestions'
import { Route as SettingsCustomizationRouteImport } from './routes/settings/customization'
import { Route as SettingsAttachmentsRouteImport } from './routes/settings/attachments'
import { Route as SettingsAppearanceRouteImport } from './routes/settings/appearance'
import { Route as SettingsAiOptionsRouteImport } from './routes/settings/ai-options'
import { Route as MainDocIndexRouteImport } from './routes/_main/doc.index'
import { Route as MainDocLibraryRouteImport } from './routes/_main/doc.library'
import { Route as MainDocDocumentIdRouteImport } from './routes/_main/doc.$documentId'
import { ServerRoute as ApiUserStyleServerRouteImport } from './routes/api/user-style'
import { ServerRoute as ApiSuggestionServerRouteImport } from './routes/api/suggestion'
import { ServerRoute as ApiInlineSuggestionServerRouteImport } from './routes/api/inline-suggestion'
import { ServerRoute as ApiFetchTokenServerRouteImport } from './routes/api/fetchToken'
import { ServerRoute as ApiPhrSplatServerRouteImport } from './routes/api/phr/$'
import { ServerRoute as ApiCheckoutSuccessServerRouteImport } from './routes/api/checkout/success'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth/$'

const SettingsRouteLazyRouteImport = createFileRoute('/settings')()
const WelcomeTermsLazyRouteImport = createFileRoute('/_welcome/terms')()
const WelcomePricingLazyRouteImport = createFileRoute('/_welcome/pricing')()
const WelcomePolicyLazyRouteImport = createFileRoute('/_welcome/policy')()
const WelcomeAboutLazyRouteImport = createFileRoute('/_welcome/about')()
const PPDocumentIdLazyRouteImport = createFileRoute('/_p/p/$documentId')()
const rootServerRouteImport = createServerRootRoute()

const SettingsRouteLazyRoute = SettingsRouteLazyRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/settings/route.lazy').then((d) => d.Route),
)
const AuthRoute = AuthRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const WelcomeRoute = WelcomeRouteImport.update({
  id: '/_welcome',
  getParentRoute: () => rootRouteImport,
} as any)
const PRoute = PRouteImport.update({
  id: '/_p',
  getParentRoute: () => rootRouteImport,
} as any)
const MainRoute = MainRouteImport.update({
  id: '/_main',
  getParentRoute: () => rootRouteImport,
} as any)
const WelcomeIndexRoute = WelcomeIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => WelcomeRoute,
} as any)
const WelcomeTermsLazyRoute = WelcomeTermsLazyRouteImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => WelcomeRoute,
} as any).lazy(() =>
  import('./routes/_welcome/terms.lazy').then((d) => d.Route),
)
const WelcomePricingLazyRoute = WelcomePricingLazyRouteImport.update({
  id: '/pricing',
  path: '/pricing',
  getParentRoute: () => WelcomeRoute,
} as any).lazy(() =>
  import('./routes/_welcome/pricing.lazy').then((d) => d.Route),
)
const WelcomePolicyLazyRoute = WelcomePolicyLazyRouteImport.update({
  id: '/policy',
  path: '/policy',
  getParentRoute: () => WelcomeRoute,
} as any).lazy(() =>
  import('./routes/_welcome/policy.lazy').then((d) => d.Route),
)
const WelcomeAboutLazyRoute = WelcomeAboutLazyRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => WelcomeRoute,
} as any).lazy(() =>
  import('./routes/_welcome/about.lazy').then((d) => d.Route),
)
const SettingsUsageRoute = SettingsUsageRouteImport.update({
  id: '/usage',
  path: '/usage',
  getParentRoute: () => SettingsRouteLazyRoute,
} as any)
const SettingsProvidersRoute = SettingsProvidersRouteImport.update({
  id: '/providers',
  path: '/providers',
  getParentRoute: () => SettingsRouteLazyRoute,
} as any)
const SettingsProfileRoute = SettingsProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => SettingsRouteLazyRoute,
} as any)
const SettingsModelsRoute = SettingsModelsRouteImport.update({
  id: '/models',
  path: '/models',
  getParentRoute: () => SettingsRouteLazyRoute,
} as any)
const SettingsInlineSuggestionsRoute =
  SettingsInlineSuggestionsRouteImport.update({
    id: '/inline-suggestions',
    path: '/inline-suggestions',
    getParentRoute: () => SettingsRouteLazyRoute,
  } as any)
const SettingsCustomizationRoute = SettingsCustomizationRouteImport.update({
  id: '/customization',
  path: '/customization',
  getParentRoute: () => SettingsRouteLazyRoute,
} as any)
const SettingsAttachmentsRoute = SettingsAttachmentsRouteImport.update({
  id: '/attachments',
  path: '/attachments',
  getParentRoute: () => SettingsRouteLazyRoute,
} as any)
const SettingsAppearanceRoute = SettingsAppearanceRouteImport.update({
  id: '/appearance',
  path: '/appearance',
  getParentRoute: () => SettingsRouteLazyRoute,
} as any)
const SettingsAiOptionsRoute = SettingsAiOptionsRouteImport.update({
  id: '/ai-options',
  path: '/ai-options',
  getParentRoute: () => SettingsRouteLazyRoute,
} as any)
const MainDocIndexRoute = MainDocIndexRouteImport.update({
  id: '/doc/',
  path: '/doc/',
  getParentRoute: () => MainRoute,
} as any)
const PPDocumentIdLazyRoute = PPDocumentIdLazyRouteImport.update({
  id: '/p/$documentId',
  path: '/p/$documentId',
  getParentRoute: () => PRoute,
} as any).lazy(() =>
  import('./routes/_p.p.$documentId.lazy').then((d) => d.Route),
)
const MainDocLibraryRoute = MainDocLibraryRouteImport.update({
  id: '/doc/library',
  path: '/doc/library',
  getParentRoute: () => MainRoute,
} as any)
const MainDocDocumentIdRoute = MainDocDocumentIdRouteImport.update({
  id: '/doc/$documentId',
  path: '/doc/$documentId',
  getParentRoute: () => MainRoute,
} as any)
const ApiUserStyleServerRoute = ApiUserStyleServerRouteImport.update({
  id: '/api/user-style',
  path: '/api/user-style',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiSuggestionServerRoute = ApiSuggestionServerRouteImport.update({
  id: '/api/suggestion',
  path: '/api/suggestion',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiInlineSuggestionServerRoute =
  ApiInlineSuggestionServerRouteImport.update({
    id: '/api/inline-suggestion',
    path: '/api/inline-suggestion',
    getParentRoute: () => rootServerRouteImport,
  } as any)
const ApiFetchTokenServerRoute = ApiFetchTokenServerRouteImport.update({
  id: '/api/fetchToken',
  path: '/api/fetchToken',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiPhrSplatServerRoute = ApiPhrSplatServerRouteImport.update({
  id: '/api/phr/$',
  path: '/api/phr/$',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiCheckoutSuccessServerRoute =
  ApiCheckoutSuccessServerRouteImport.update({
    id: '/api/checkout/success',
    path: '/api/checkout/success',
    getParentRoute: () => rootServerRouteImport,
  } as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/auth': typeof AuthRoute
  '/settings': typeof SettingsRouteLazyRouteWithChildren
  '/settings/ai-options': typeof SettingsAiOptionsRoute
  '/settings/appearance': typeof SettingsAppearanceRoute
  '/settings/attachments': typeof SettingsAttachmentsRoute
  '/settings/customization': typeof SettingsCustomizationRoute
  '/settings/inline-suggestions': typeof SettingsInlineSuggestionsRoute
  '/settings/models': typeof SettingsModelsRoute
  '/settings/profile': typeof SettingsProfileRoute
  '/settings/providers': typeof SettingsProvidersRoute
  '/settings/usage': typeof SettingsUsageRoute
  '/about': typeof WelcomeAboutLazyRoute
  '/policy': typeof WelcomePolicyLazyRoute
  '/pricing': typeof WelcomePricingLazyRoute
  '/terms': typeof WelcomeTermsLazyRoute
  '/': typeof WelcomeIndexRoute
  '/doc/$documentId': typeof MainDocDocumentIdRoute
  '/doc/library': typeof MainDocLibraryRoute
  '/p/$documentId': typeof PPDocumentIdLazyRoute
  '/doc': typeof MainDocIndexRoute
}
export interface FileRoutesByTo {
  '/auth': typeof AuthRoute
  '/settings': typeof SettingsRouteLazyRouteWithChildren
  '/settings/ai-options': typeof SettingsAiOptionsRoute
  '/settings/appearance': typeof SettingsAppearanceRoute
  '/settings/attachments': typeof SettingsAttachmentsRoute
  '/settings/customization': typeof SettingsCustomizationRoute
  '/settings/inline-suggestions': typeof SettingsInlineSuggestionsRoute
  '/settings/models': typeof SettingsModelsRoute
  '/settings/profile': typeof SettingsProfileRoute
  '/settings/providers': typeof SettingsProvidersRoute
  '/settings/usage': typeof SettingsUsageRoute
  '/about': typeof WelcomeAboutLazyRoute
  '/policy': typeof WelcomePolicyLazyRoute
  '/pricing': typeof WelcomePricingLazyRoute
  '/terms': typeof WelcomeTermsLazyRoute
  '/': typeof WelcomeIndexRoute
  '/doc/$documentId': typeof MainDocDocumentIdRoute
  '/doc/library': typeof MainDocLibraryRoute
  '/p/$documentId': typeof PPDocumentIdLazyRoute
  '/doc': typeof MainDocIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_main': typeof MainRouteWithChildren
  '/_p': typeof PRouteWithChildren
  '/_welcome': typeof WelcomeRouteWithChildren
  '/auth': typeof AuthRoute
  '/settings': typeof SettingsRouteLazyRouteWithChildren
  '/settings/ai-options': typeof SettingsAiOptionsRoute
  '/settings/appearance': typeof SettingsAppearanceRoute
  '/settings/attachments': typeof SettingsAttachmentsRoute
  '/settings/customization': typeof SettingsCustomizationRoute
  '/settings/inline-suggestions': typeof SettingsInlineSuggestionsRoute
  '/settings/models': typeof SettingsModelsRoute
  '/settings/profile': typeof SettingsProfileRoute
  '/settings/providers': typeof SettingsProvidersRoute
  '/settings/usage': typeof SettingsUsageRoute
  '/_welcome/about': typeof WelcomeAboutLazyRoute
  '/_welcome/policy': typeof WelcomePolicyLazyRoute
  '/_welcome/pricing': typeof WelcomePricingLazyRoute
  '/_welcome/terms': typeof WelcomeTermsLazyRoute
  '/_welcome/': typeof WelcomeIndexRoute
  '/_main/doc/$documentId': typeof MainDocDocumentIdRoute
  '/_main/doc/library': typeof MainDocLibraryRoute
  '/_p/p/$documentId': typeof PPDocumentIdLazyRoute
  '/_main/doc/': typeof MainDocIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/auth'
    | '/settings'
    | '/settings/ai-options'
    | '/settings/appearance'
    | '/settings/attachments'
    | '/settings/customization'
    | '/settings/inline-suggestions'
    | '/settings/models'
    | '/settings/profile'
    | '/settings/providers'
    | '/settings/usage'
    | '/about'
    | '/policy'
    | '/pricing'
    | '/terms'
    | '/'
    | '/doc/$documentId'
    | '/doc/library'
    | '/p/$documentId'
    | '/doc'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/auth'
    | '/settings'
    | '/settings/ai-options'
    | '/settings/appearance'
    | '/settings/attachments'
    | '/settings/customization'
    | '/settings/inline-suggestions'
    | '/settings/models'
    | '/settings/profile'
    | '/settings/providers'
    | '/settings/usage'
    | '/about'
    | '/policy'
    | '/pricing'
    | '/terms'
    | '/'
    | '/doc/$documentId'
    | '/doc/library'
    | '/p/$documentId'
    | '/doc'
  id:
    | '__root__'
    | '/_main'
    | '/_p'
    | '/_welcome'
    | '/auth'
    | '/settings'
    | '/settings/ai-options'
    | '/settings/appearance'
    | '/settings/attachments'
    | '/settings/customization'
    | '/settings/inline-suggestions'
    | '/settings/models'
    | '/settings/profile'
    | '/settings/providers'
    | '/settings/usage'
    | '/_welcome/about'
    | '/_welcome/policy'
    | '/_welcome/pricing'
    | '/_welcome/terms'
    | '/_welcome/'
    | '/_main/doc/$documentId'
    | '/_main/doc/library'
    | '/_p/p/$documentId'
    | '/_main/doc/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  MainRoute: typeof MainRouteWithChildren
  PRoute: typeof PRouteWithChildren
  WelcomeRoute: typeof WelcomeRouteWithChildren
  AuthRoute: typeof AuthRoute
  SettingsRouteLazyRoute: typeof SettingsRouteLazyRouteWithChildren
}
export interface FileServerRoutesByFullPath {
  '/api/fetchToken': typeof ApiFetchTokenServerRoute
  '/api/inline-suggestion': typeof ApiInlineSuggestionServerRoute
  '/api/suggestion': typeof ApiSuggestionServerRoute
  '/api/user-style': typeof ApiUserStyleServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/checkout/success': typeof ApiCheckoutSuccessServerRoute
  '/api/phr/$': typeof ApiPhrSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/fetchToken': typeof ApiFetchTokenServerRoute
  '/api/inline-suggestion': typeof ApiInlineSuggestionServerRoute
  '/api/suggestion': typeof ApiSuggestionServerRoute
  '/api/user-style': typeof ApiUserStyleServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/checkout/success': typeof ApiCheckoutSuccessServerRoute
  '/api/phr/$': typeof ApiPhrSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/fetchToken': typeof ApiFetchTokenServerRoute
  '/api/inline-suggestion': typeof ApiInlineSuggestionServerRoute
  '/api/suggestion': typeof ApiSuggestionServerRoute
  '/api/user-style': typeof ApiUserStyleServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/checkout/success': typeof ApiCheckoutSuccessServerRoute
  '/api/phr/$': typeof ApiPhrSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths:
    | '/api/fetchToken'
    | '/api/inline-suggestion'
    | '/api/suggestion'
    | '/api/user-style'
    | '/api/auth/$'
    | '/api/checkout/success'
    | '/api/phr/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to:
    | '/api/fetchToken'
    | '/api/inline-suggestion'
    | '/api/suggestion'
    | '/api/user-style'
    | '/api/auth/$'
    | '/api/checkout/success'
    | '/api/phr/$'
  id:
    | '__root__'
    | '/api/fetchToken'
    | '/api/inline-suggestion'
    | '/api/suggestion'
    | '/api/user-style'
    | '/api/auth/$'
    | '/api/checkout/success'
    | '/api/phr/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiFetchTokenServerRoute: typeof ApiFetchTokenServerRoute
  ApiInlineSuggestionServerRoute: typeof ApiInlineSuggestionServerRoute
  ApiSuggestionServerRoute: typeof ApiSuggestionServerRoute
  ApiUserStyleServerRoute: typeof ApiUserStyleServerRoute
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
  ApiCheckoutSuccessServerRoute: typeof ApiCheckoutSuccessServerRoute
  ApiPhrSplatServerRoute: typeof ApiPhrSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_welcome': {
      id: '/_welcome'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof WelcomeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_p': {
      id: '/_p'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_main': {
      id: '/_main'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof MainRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_welcome/': {
      id: '/_welcome/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof WelcomeIndexRouteImport
      parentRoute: typeof WelcomeRoute
    }
    '/_welcome/terms': {
      id: '/_welcome/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof WelcomeTermsLazyRouteImport
      parentRoute: typeof WelcomeRoute
    }
    '/_welcome/pricing': {
      id: '/_welcome/pricing'
      path: '/pricing'
      fullPath: '/pricing'
      preLoaderRoute: typeof WelcomePricingLazyRouteImport
      parentRoute: typeof WelcomeRoute
    }
    '/_welcome/policy': {
      id: '/_welcome/policy'
      path: '/policy'
      fullPath: '/policy'
      preLoaderRoute: typeof WelcomePolicyLazyRouteImport
      parentRoute: typeof WelcomeRoute
    }
    '/_welcome/about': {
      id: '/_welcome/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof WelcomeAboutLazyRouteImport
      parentRoute: typeof WelcomeRoute
    }
    '/settings/usage': {
      id: '/settings/usage'
      path: '/usage'
      fullPath: '/settings/usage'
      preLoaderRoute: typeof SettingsUsageRouteImport
      parentRoute: typeof SettingsRouteLazyRoute
    }
    '/settings/providers': {
      id: '/settings/providers'
      path: '/providers'
      fullPath: '/settings/providers'
      preLoaderRoute: typeof SettingsProvidersRouteImport
      parentRoute: typeof SettingsRouteLazyRoute
    }
    '/settings/profile': {
      id: '/settings/profile'
      path: '/profile'
      fullPath: '/settings/profile'
      preLoaderRoute: typeof SettingsProfileRouteImport
      parentRoute: typeof SettingsRouteLazyRoute
    }
    '/settings/models': {
      id: '/settings/models'
      path: '/models'
      fullPath: '/settings/models'
      preLoaderRoute: typeof SettingsModelsRouteImport
      parentRoute: typeof SettingsRouteLazyRoute
    }
    '/settings/inline-suggestions': {
      id: '/settings/inline-suggestions'
      path: '/inline-suggestions'
      fullPath: '/settings/inline-suggestions'
      preLoaderRoute: typeof SettingsInlineSuggestionsRouteImport
      parentRoute: typeof SettingsRouteLazyRoute
    }
    '/settings/customization': {
      id: '/settings/customization'
      path: '/customization'
      fullPath: '/settings/customization'
      preLoaderRoute: typeof SettingsCustomizationRouteImport
      parentRoute: typeof SettingsRouteLazyRoute
    }
    '/settings/attachments': {
      id: '/settings/attachments'
      path: '/attachments'
      fullPath: '/settings/attachments'
      preLoaderRoute: typeof SettingsAttachmentsRouteImport
      parentRoute: typeof SettingsRouteLazyRoute
    }
    '/settings/appearance': {
      id: '/settings/appearance'
      path: '/appearance'
      fullPath: '/settings/appearance'
      preLoaderRoute: typeof SettingsAppearanceRouteImport
      parentRoute: typeof SettingsRouteLazyRoute
    }
    '/settings/ai-options': {
      id: '/settings/ai-options'
      path: '/ai-options'
      fullPath: '/settings/ai-options'
      preLoaderRoute: typeof SettingsAiOptionsRouteImport
      parentRoute: typeof SettingsRouteLazyRoute
    }
    '/_main/doc/': {
      id: '/_main/doc/'
      path: '/doc'
      fullPath: '/doc'
      preLoaderRoute: typeof MainDocIndexRouteImport
      parentRoute: typeof MainRoute
    }
    '/_p/p/$documentId': {
      id: '/_p/p/$documentId'
      path: '/p/$documentId'
      fullPath: '/p/$documentId'
      preLoaderRoute: typeof PPDocumentIdLazyRouteImport
      parentRoute: typeof PRoute
    }
    '/_main/doc/library': {
      id: '/_main/doc/library'
      path: '/doc/library'
      fullPath: '/doc/library'
      preLoaderRoute: typeof MainDocLibraryRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/doc/$documentId': {
      id: '/_main/doc/$documentId'
      path: '/doc/$documentId'
      fullPath: '/doc/$documentId'
      preLoaderRoute: typeof MainDocDocumentIdRouteImport
      parentRoute: typeof MainRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/user-style': {
      id: '/api/user-style'
      path: '/api/user-style'
      fullPath: '/api/user-style'
      preLoaderRoute: typeof ApiUserStyleServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/suggestion': {
      id: '/api/suggestion'
      path: '/api/suggestion'
      fullPath: '/api/suggestion'
      preLoaderRoute: typeof ApiSuggestionServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/inline-suggestion': {
      id: '/api/inline-suggestion'
      path: '/api/inline-suggestion'
      fullPath: '/api/inline-suggestion'
      preLoaderRoute: typeof ApiInlineSuggestionServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/fetchToken': {
      id: '/api/fetchToken'
      path: '/api/fetchToken'
      fullPath: '/api/fetchToken'
      preLoaderRoute: typeof ApiFetchTokenServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/phr/$': {
      id: '/api/phr/$'
      path: '/api/phr/$'
      fullPath: '/api/phr/$'
      preLoaderRoute: typeof ApiPhrSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/checkout/success': {
      id: '/api/checkout/success'
      path: '/api/checkout/success'
      fullPath: '/api/checkout/success'
      preLoaderRoute: typeof ApiCheckoutSuccessServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface MainRouteChildren {
  MainDocDocumentIdRoute: typeof MainDocDocumentIdRoute
  MainDocLibraryRoute: typeof MainDocLibraryRoute
  MainDocIndexRoute: typeof MainDocIndexRoute
}

const MainRouteChildren: MainRouteChildren = {
  MainDocDocumentIdRoute: MainDocDocumentIdRoute,
  MainDocLibraryRoute: MainDocLibraryRoute,
  MainDocIndexRoute: MainDocIndexRoute,
}

const MainRouteWithChildren = MainRoute._addFileChildren(MainRouteChildren)

interface PRouteChildren {
  PPDocumentIdLazyRoute: typeof PPDocumentIdLazyRoute
}

const PRouteChildren: PRouteChildren = {
  PPDocumentIdLazyRoute: PPDocumentIdLazyRoute,
}

const PRouteWithChildren = PRoute._addFileChildren(PRouteChildren)

interface WelcomeRouteChildren {
  WelcomeAboutLazyRoute: typeof WelcomeAboutLazyRoute
  WelcomePolicyLazyRoute: typeof WelcomePolicyLazyRoute
  WelcomePricingLazyRoute: typeof WelcomePricingLazyRoute
  WelcomeTermsLazyRoute: typeof WelcomeTermsLazyRoute
  WelcomeIndexRoute: typeof WelcomeIndexRoute
}

const WelcomeRouteChildren: WelcomeRouteChildren = {
  WelcomeAboutLazyRoute: WelcomeAboutLazyRoute,
  WelcomePolicyLazyRoute: WelcomePolicyLazyRoute,
  WelcomePricingLazyRoute: WelcomePricingLazyRoute,
  WelcomeTermsLazyRoute: WelcomeTermsLazyRoute,
  WelcomeIndexRoute: WelcomeIndexRoute,
}

const WelcomeRouteWithChildren =
  WelcomeRoute._addFileChildren(WelcomeRouteChildren)

interface SettingsRouteLazyRouteChildren {
  SettingsAiOptionsRoute: typeof SettingsAiOptionsRoute
  SettingsAppearanceRoute: typeof SettingsAppearanceRoute
  SettingsAttachmentsRoute: typeof SettingsAttachmentsRoute
  SettingsCustomizationRoute: typeof SettingsCustomizationRoute
  SettingsInlineSuggestionsRoute: typeof SettingsInlineSuggestionsRoute
  SettingsModelsRoute: typeof SettingsModelsRoute
  SettingsProfileRoute: typeof SettingsProfileRoute
  SettingsProvidersRoute: typeof SettingsProvidersRoute
  SettingsUsageRoute: typeof SettingsUsageRoute
}

const SettingsRouteLazyRouteChildren: SettingsRouteLazyRouteChildren = {
  SettingsAiOptionsRoute: SettingsAiOptionsRoute,
  SettingsAppearanceRoute: SettingsAppearanceRoute,
  SettingsAttachmentsRoute: SettingsAttachmentsRoute,
  SettingsCustomizationRoute: SettingsCustomizationRoute,
  SettingsInlineSuggestionsRoute: SettingsInlineSuggestionsRoute,
  SettingsModelsRoute: SettingsModelsRoute,
  SettingsProfileRoute: SettingsProfileRoute,
  SettingsProvidersRoute: SettingsProvidersRoute,
  SettingsUsageRoute: SettingsUsageRoute,
}

const SettingsRouteLazyRouteWithChildren =
  SettingsRouteLazyRoute._addFileChildren(SettingsRouteLazyRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  MainRoute: MainRouteWithChildren,
  PRoute: PRouteWithChildren,
  WelcomeRoute: WelcomeRouteWithChildren,
  AuthRoute: AuthRoute,
  SettingsRouteLazyRoute: SettingsRouteLazyRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiFetchTokenServerRoute: ApiFetchTokenServerRoute,
  ApiInlineSuggestionServerRoute: ApiInlineSuggestionServerRoute,
  ApiSuggestionServerRoute: ApiSuggestionServerRoute,
  ApiUserStyleServerRoute: ApiUserStyleServerRoute,
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
  ApiCheckoutSuccessServerRoute: ApiCheckoutSuccessServerRoute,
  ApiPhrSplatServerRoute: ApiPhrSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
