/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as TodosRouteImport } from './routes/todos'
import { Route as WelcomeRouteImport } from './routes/_welcome'
import { Route as DocRouteImport } from './routes/_doc'
import { Route as AuthedRouteImport } from './routes/_authed'
import { Route as WelcomeIndexRouteImport } from './routes/_welcome/index'
import { Route as WelcomeTermsRouteImport } from './routes/_welcome/terms'
import { Route as WelcomePricingRouteImport } from './routes/_welcome/pricing'
import { Route as WelcomePolicyRouteImport } from './routes/_welcome/policy'
import { Route as WelcomeAboutRouteImport } from './routes/_welcome/about'
import { Route as DocDocRouteImport } from './routes/_doc/doc'
import { Route as AuthedServerRouteImport } from './routes/_authed/server'
import { Route as AuthedClientOnlyRouteImport } from './routes/_authed/client-only'
import { Route as AuthSignUpRouteImport } from './routes/_auth/sign-up'
import { Route as AuthAuthRouteImport } from './routes/_auth/auth'
import { Route as WelcomeWelcomeIndexRouteImport } from './routes/_welcome/welcome.index'
import { Route as AuthedClientOnlyIndexRouteImport } from './routes/_authed/client-only.index'
import { Route as DocDocDocumentIdRouteImport } from './routes/_doc/doc.$documentId'
import { ServerRoute as ApiPortalServerRouteImport } from './routes/api/portal'
import { ServerRoute as ApiCheckoutIndexServerRouteImport } from './routes/api/checkout/index'
import { ServerRoute as ApiWebhooksPolarServerRouteImport } from './routes/api/webhooks/polar'
import { ServerRoute as ApiCheckoutSuccessServerRouteImport } from './routes/api/checkout/success'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth/$'

const rootServerRouteImport = createServerRootRoute()

const TodosRoute = TodosRouteImport.update({
  id: '/todos',
  path: '/todos',
  getParentRoute: () => rootRouteImport,
} as any)
const WelcomeRoute = WelcomeRouteImport.update({
  id: '/_welcome',
  getParentRoute: () => rootRouteImport,
} as any)
const DocRoute = DocRouteImport.update({
  id: '/_doc',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthedRoute = AuthedRouteImport.update({
  id: '/_authed',
  getParentRoute: () => rootRouteImport,
} as any)
const WelcomeIndexRoute = WelcomeIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => WelcomeRoute,
} as any)
const WelcomeTermsRoute = WelcomeTermsRouteImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => WelcomeRoute,
} as any)
const WelcomePricingRoute = WelcomePricingRouteImport.update({
  id: '/pricing',
  path: '/pricing',
  getParentRoute: () => WelcomeRoute,
} as any)
const WelcomePolicyRoute = WelcomePolicyRouteImport.update({
  id: '/policy',
  path: '/policy',
  getParentRoute: () => WelcomeRoute,
} as any)
const WelcomeAboutRoute = WelcomeAboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => WelcomeRoute,
} as any)
const DocDocRoute = DocDocRouteImport.update({
  id: '/doc',
  path: '/doc',
  getParentRoute: () => DocRoute,
} as any)
const AuthedServerRoute = AuthedServerRouteImport.update({
  id: '/server',
  path: '/server',
  getParentRoute: () => AuthedRoute,
} as any)
const AuthedClientOnlyRoute = AuthedClientOnlyRouteImport.update({
  id: '/client-only',
  path: '/client-only',
  getParentRoute: () => AuthedRoute,
} as any)
const AuthSignUpRoute = AuthSignUpRouteImport.update({
  id: '/_auth/sign-up',
  path: '/sign-up',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthAuthRoute = AuthAuthRouteImport.update({
  id: '/_auth/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const WelcomeWelcomeIndexRoute = WelcomeWelcomeIndexRouteImport.update({
  id: '/welcome/',
  path: '/welcome/',
  getParentRoute: () => WelcomeRoute,
} as any)
const AuthedClientOnlyIndexRoute = AuthedClientOnlyIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthedClientOnlyRoute,
} as any)
const DocDocDocumentIdRoute = DocDocDocumentIdRouteImport.update({
  id: '/$documentId',
  path: '/$documentId',
  getParentRoute: () => DocDocRoute,
} as any)
const ApiPortalServerRoute = ApiPortalServerRouteImport.update({
  id: '/api/portal',
  path: '/api/portal',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiCheckoutIndexServerRoute = ApiCheckoutIndexServerRouteImport.update({
  id: '/api/checkout/',
  path: '/api/checkout/',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiWebhooksPolarServerRoute = ApiWebhooksPolarServerRouteImport.update({
  id: '/api/webhooks/polar',
  path: '/api/webhooks/polar',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiCheckoutSuccessServerRoute =
  ApiCheckoutSuccessServerRouteImport.update({
    id: '/api/checkout/success',
    path: '/api/checkout/success',
    getParentRoute: () => rootServerRouteImport,
  } as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/todos': typeof TodosRoute
  '/auth': typeof AuthAuthRoute
  '/sign-up': typeof AuthSignUpRoute
  '/client-only': typeof AuthedClientOnlyRouteWithChildren
  '/server': typeof AuthedServerRoute
  '/doc': typeof DocDocRouteWithChildren
  '/about': typeof WelcomeAboutRoute
  '/policy': typeof WelcomePolicyRoute
  '/pricing': typeof WelcomePricingRoute
  '/terms': typeof WelcomeTermsRoute
  '/': typeof WelcomeIndexRoute
  '/doc/$documentId': typeof DocDocDocumentIdRoute
  '/client-only/': typeof AuthedClientOnlyIndexRoute
  '/welcome': typeof WelcomeWelcomeIndexRoute
}
export interface FileRoutesByTo {
  '/todos': typeof TodosRoute
  '/auth': typeof AuthAuthRoute
  '/sign-up': typeof AuthSignUpRoute
  '/server': typeof AuthedServerRoute
  '/doc': typeof DocDocRouteWithChildren
  '/about': typeof WelcomeAboutRoute
  '/policy': typeof WelcomePolicyRoute
  '/pricing': typeof WelcomePricingRoute
  '/terms': typeof WelcomeTermsRoute
  '/': typeof WelcomeIndexRoute
  '/doc/$documentId': typeof DocDocDocumentIdRoute
  '/client-only': typeof AuthedClientOnlyIndexRoute
  '/welcome': typeof WelcomeWelcomeIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authed': typeof AuthedRouteWithChildren
  '/_doc': typeof DocRouteWithChildren
  '/_welcome': typeof WelcomeRouteWithChildren
  '/todos': typeof TodosRoute
  '/_auth/auth': typeof AuthAuthRoute
  '/_auth/sign-up': typeof AuthSignUpRoute
  '/_authed/client-only': typeof AuthedClientOnlyRouteWithChildren
  '/_authed/server': typeof AuthedServerRoute
  '/_doc/doc': typeof DocDocRouteWithChildren
  '/_welcome/about': typeof WelcomeAboutRoute
  '/_welcome/policy': typeof WelcomePolicyRoute
  '/_welcome/pricing': typeof WelcomePricingRoute
  '/_welcome/terms': typeof WelcomeTermsRoute
  '/_welcome/': typeof WelcomeIndexRoute
  '/_doc/doc/$documentId': typeof DocDocDocumentIdRoute
  '/_authed/client-only/': typeof AuthedClientOnlyIndexRoute
  '/_welcome/welcome/': typeof WelcomeWelcomeIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/todos'
    | '/auth'
    | '/sign-up'
    | '/client-only'
    | '/server'
    | '/doc'
    | '/about'
    | '/policy'
    | '/pricing'
    | '/terms'
    | '/'
    | '/doc/$documentId'
    | '/client-only/'
    | '/welcome'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/todos'
    | '/auth'
    | '/sign-up'
    | '/server'
    | '/doc'
    | '/about'
    | '/policy'
    | '/pricing'
    | '/terms'
    | '/'
    | '/doc/$documentId'
    | '/client-only'
    | '/welcome'
  id:
    | '__root__'
    | '/_authed'
    | '/_doc'
    | '/_welcome'
    | '/todos'
    | '/_auth/auth'
    | '/_auth/sign-up'
    | '/_authed/client-only'
    | '/_authed/server'
    | '/_doc/doc'
    | '/_welcome/about'
    | '/_welcome/policy'
    | '/_welcome/pricing'
    | '/_welcome/terms'
    | '/_welcome/'
    | '/_doc/doc/$documentId'
    | '/_authed/client-only/'
    | '/_welcome/welcome/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthedRoute: typeof AuthedRouteWithChildren
  DocRoute: typeof DocRouteWithChildren
  WelcomeRoute: typeof WelcomeRouteWithChildren
  TodosRoute: typeof TodosRoute
  AuthAuthRoute: typeof AuthAuthRoute
  AuthSignUpRoute: typeof AuthSignUpRoute
}
export interface FileServerRoutesByFullPath {
  '/api/portal': typeof ApiPortalServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/checkout/success': typeof ApiCheckoutSuccessServerRoute
  '/api/webhooks/polar': typeof ApiWebhooksPolarServerRoute
  '/api/checkout': typeof ApiCheckoutIndexServerRoute
}
export interface FileServerRoutesByTo {
  '/api/portal': typeof ApiPortalServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/checkout/success': typeof ApiCheckoutSuccessServerRoute
  '/api/webhooks/polar': typeof ApiWebhooksPolarServerRoute
  '/api/checkout': typeof ApiCheckoutIndexServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/portal': typeof ApiPortalServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/checkout/success': typeof ApiCheckoutSuccessServerRoute
  '/api/webhooks/polar': typeof ApiWebhooksPolarServerRoute
  '/api/checkout/': typeof ApiCheckoutIndexServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths:
    | '/api/portal'
    | '/api/auth/$'
    | '/api/checkout/success'
    | '/api/webhooks/polar'
    | '/api/checkout'
  fileServerRoutesByTo: FileServerRoutesByTo
  to:
    | '/api/portal'
    | '/api/auth/$'
    | '/api/checkout/success'
    | '/api/webhooks/polar'
    | '/api/checkout'
  id:
    | '__root__'
    | '/api/portal'
    | '/api/auth/$'
    | '/api/checkout/success'
    | '/api/webhooks/polar'
    | '/api/checkout/'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiPortalServerRoute: typeof ApiPortalServerRoute
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
  ApiCheckoutSuccessServerRoute: typeof ApiCheckoutSuccessServerRoute
  ApiWebhooksPolarServerRoute: typeof ApiWebhooksPolarServerRoute
  ApiCheckoutIndexServerRoute: typeof ApiCheckoutIndexServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/todos': {
      id: '/todos'
      path: '/todos'
      fullPath: '/todos'
      preLoaderRoute: typeof TodosRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_welcome': {
      id: '/_welcome'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof WelcomeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_doc': {
      id: '/_doc'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof DocRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_welcome/': {
      id: '/_welcome/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof WelcomeIndexRouteImport
      parentRoute: typeof WelcomeRoute
    }
    '/_welcome/terms': {
      id: '/_welcome/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof WelcomeTermsRouteImport
      parentRoute: typeof WelcomeRoute
    }
    '/_welcome/pricing': {
      id: '/_welcome/pricing'
      path: '/pricing'
      fullPath: '/pricing'
      preLoaderRoute: typeof WelcomePricingRouteImport
      parentRoute: typeof WelcomeRoute
    }
    '/_welcome/policy': {
      id: '/_welcome/policy'
      path: '/policy'
      fullPath: '/policy'
      preLoaderRoute: typeof WelcomePolicyRouteImport
      parentRoute: typeof WelcomeRoute
    }
    '/_welcome/about': {
      id: '/_welcome/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof WelcomeAboutRouteImport
      parentRoute: typeof WelcomeRoute
    }
    '/_doc/doc': {
      id: '/_doc/doc'
      path: '/doc'
      fullPath: '/doc'
      preLoaderRoute: typeof DocDocRouteImport
      parentRoute: typeof DocRoute
    }
    '/_authed/server': {
      id: '/_authed/server'
      path: '/server'
      fullPath: '/server'
      preLoaderRoute: typeof AuthedServerRouteImport
      parentRoute: typeof AuthedRoute
    }
    '/_authed/client-only': {
      id: '/_authed/client-only'
      path: '/client-only'
      fullPath: '/client-only'
      preLoaderRoute: typeof AuthedClientOnlyRouteImport
      parentRoute: typeof AuthedRoute
    }
    '/_auth/sign-up': {
      id: '/_auth/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof AuthSignUpRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/auth': {
      id: '/_auth/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthAuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_welcome/welcome/': {
      id: '/_welcome/welcome/'
      path: '/welcome'
      fullPath: '/welcome'
      preLoaderRoute: typeof WelcomeWelcomeIndexRouteImport
      parentRoute: typeof WelcomeRoute
    }
    '/_authed/client-only/': {
      id: '/_authed/client-only/'
      path: '/'
      fullPath: '/client-only/'
      preLoaderRoute: typeof AuthedClientOnlyIndexRouteImport
      parentRoute: typeof AuthedClientOnlyRoute
    }
    '/_doc/doc/$documentId': {
      id: '/_doc/doc/$documentId'
      path: '/$documentId'
      fullPath: '/doc/$documentId'
      preLoaderRoute: typeof DocDocDocumentIdRouteImport
      parentRoute: typeof DocDocRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/portal': {
      id: '/api/portal'
      path: '/api/portal'
      fullPath: '/api/portal'
      preLoaderRoute: typeof ApiPortalServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/checkout/': {
      id: '/api/checkout/'
      path: '/api/checkout'
      fullPath: '/api/checkout'
      preLoaderRoute: typeof ApiCheckoutIndexServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/webhooks/polar': {
      id: '/api/webhooks/polar'
      path: '/api/webhooks/polar'
      fullPath: '/api/webhooks/polar'
      preLoaderRoute: typeof ApiWebhooksPolarServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/checkout/success': {
      id: '/api/checkout/success'
      path: '/api/checkout/success'
      fullPath: '/api/checkout/success'
      preLoaderRoute: typeof ApiCheckoutSuccessServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface AuthedClientOnlyRouteChildren {
  AuthedClientOnlyIndexRoute: typeof AuthedClientOnlyIndexRoute
}

const AuthedClientOnlyRouteChildren: AuthedClientOnlyRouteChildren = {
  AuthedClientOnlyIndexRoute: AuthedClientOnlyIndexRoute,
}

const AuthedClientOnlyRouteWithChildren =
  AuthedClientOnlyRoute._addFileChildren(AuthedClientOnlyRouteChildren)

interface AuthedRouteChildren {
  AuthedClientOnlyRoute: typeof AuthedClientOnlyRouteWithChildren
  AuthedServerRoute: typeof AuthedServerRoute
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedClientOnlyRoute: AuthedClientOnlyRouteWithChildren,
  AuthedServerRoute: AuthedServerRoute,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

interface DocDocRouteChildren {
  DocDocDocumentIdRoute: typeof DocDocDocumentIdRoute
}

const DocDocRouteChildren: DocDocRouteChildren = {
  DocDocDocumentIdRoute: DocDocDocumentIdRoute,
}

const DocDocRouteWithChildren =
  DocDocRoute._addFileChildren(DocDocRouteChildren)

interface DocRouteChildren {
  DocDocRoute: typeof DocDocRouteWithChildren
}

const DocRouteChildren: DocRouteChildren = {
  DocDocRoute: DocDocRouteWithChildren,
}

const DocRouteWithChildren = DocRoute._addFileChildren(DocRouteChildren)

interface WelcomeRouteChildren {
  WelcomeAboutRoute: typeof WelcomeAboutRoute
  WelcomePolicyRoute: typeof WelcomePolicyRoute
  WelcomePricingRoute: typeof WelcomePricingRoute
  WelcomeTermsRoute: typeof WelcomeTermsRoute
  WelcomeIndexRoute: typeof WelcomeIndexRoute
  WelcomeWelcomeIndexRoute: typeof WelcomeWelcomeIndexRoute
}

const WelcomeRouteChildren: WelcomeRouteChildren = {
  WelcomeAboutRoute: WelcomeAboutRoute,
  WelcomePolicyRoute: WelcomePolicyRoute,
  WelcomePricingRoute: WelcomePricingRoute,
  WelcomeTermsRoute: WelcomeTermsRoute,
  WelcomeIndexRoute: WelcomeIndexRoute,
  WelcomeWelcomeIndexRoute: WelcomeWelcomeIndexRoute,
}

const WelcomeRouteWithChildren =
  WelcomeRoute._addFileChildren(WelcomeRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AuthedRoute: AuthedRouteWithChildren,
  DocRoute: DocRouteWithChildren,
  WelcomeRoute: WelcomeRouteWithChildren,
  TodosRoute: TodosRoute,
  AuthAuthRoute: AuthAuthRoute,
  AuthSignUpRoute: AuthSignUpRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiPortalServerRoute: ApiPortalServerRoute,
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
  ApiCheckoutSuccessServerRoute: ApiCheckoutSuccessServerRoute,
  ApiWebhooksPolarServerRoute: ApiWebhooksPolarServerRoute,
  ApiCheckoutIndexServerRoute: ApiCheckoutIndexServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
